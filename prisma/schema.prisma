generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @default("")
  access_token      String? @default("")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @default("")
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @unique @default(cuid())
  name          String?   @default("")
  username      String?   @unique @default("")
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  website       String?   @default("")
  bio           String?   @default("")
}

model Like {
  id     String @id @unique @default(cuid())
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Post {
  id          String    @id @unique @default(cuid())
  userId      String
  title       String
  description String
  content     String
  image       String
  published   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  likes       Like[]
  comments    Comment[]
  views       Int       @default(0)
}

model Comment {
  id        String   @id @unique @default(cuid())
  userId    String
  postId    String
  text      String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  published DateTime @default(now())
}
